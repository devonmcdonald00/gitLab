{"version":3,"sources":["serviceWorker.js","index.js","ipfs.js","App.js","utils/getWeb3.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","host","port","protocol","hex2ascii","props","_this","Object","_home_pedriv_Documents_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_pedriv_Documents_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_pedriv_Documents_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","web3","accounts","myAccount","myContract","debug","count","mode","events","ValidationResult","Time","Target","Price","dataID","resultID","RequestStartTime","providerCount","pendingCount","validatingCount","providingCount","providerList","componentWillMount","_home_pedriv_Documents_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_pedriv_Documents_gitLab_bcai_v2_0_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee2","Contract","instance","socket","wrap","_context2","prev","next","getWeb3","sent","eth","getAccounts","truffleContract","TaskContract","setProvider","currentProvider","deployed","buildSocket","console","log","setState","data","undefined","result","showPools","on","_ref2","_callee","newAccount","_context","stop","_x","apply","arguments","t0","alert","_ref3","_callee3","loc","_context3","indexOf","io","connect","emit","myIP","tag","dat","msg","disconnect","abrupt","_x2","IPFSupload","_callee4","_context4","Promise","resolve","reject","files","add","buffer","err","IPFSDownload","_ref5","_callee5","event","_context5","target","name","get","_x3","DownloadInfo","_ref6","_callee6","tempSocket","_context6","_x4","IPFSSubmit","_ref7","_callee7","_context7","preventDefault","addNotification","_x5","matchReq","_ref8","_callee8","provAddr","reqAddr","_context8","getPastEvents","fromBlock","toBlock","pastEvents","i","length","utils","hexToAscii","args","info","catch","_x6","submitRequest","_ref9","_callee9","_context9","startRequest","asciiToHex","from","value","ret","addLongNotification","StartTime","receipt","blockNumber","_x7","submitJob","_ref10","_callee10","resultHash","_context10","completeRequest","gas","_x8","submitValidation","_ref11","_callee11","req","_context11","_x9","downloadEvent","_ref12","_callee12","_context12","_x10","checkEvents","_callee13","_context13","extra","resuldID","captureFile","bind","_home_pedriv_Documents_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","ListoutPool","DisplayNonZeroInList","TimeChange","TargetChange","PriceChange","changeMode","changeAccount","showIDs","applyAsProvider","submitValidationTrue","submitValidationFalse","stopJob","stopProviding","notificationDOMRef","React","createRef","_this2","file","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","stopRequest","_this3","startProviding","String","_this4","getProviderPool","provPool","getPendingPool","reqPool","getProvidingPool","providingPool","getValidatingPool","valiPool","Pool","type","_this5","listProviders","proList","listRequests","pendList","Text","List","j","title","message","current","insert","container","animationIn","animationOut","dismiss","duration","dismissable","click","react__WEBPACK_IMPORTED_MODULE_8___default","onClick","style","margin","marginBottom","marginRight","marginLeft","onSubmit","onChange","marginTop","body","className","react_notifications_component__WEBPACK_IMPORTED_MODULE_14___default","ref","fontsize","height","width","startRequestSubmit","showSubmitButton","showUploadModule","showStopButtons","showValidationButtons","showUserDivider","Component","addEventListener","_web","provider","_web2","ethereum","Web3","enable","providers","HttpProvider"],"mappings":"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","file":"static/js/main.67816bc4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const IPFS = require('ipfs-api');\nconst ipfs = new IPFS({host: 'ipfs.infura.io', port:5001, protocol: 'https'})\n\nexport default ipfs;","// this is the main entrance of Application\n// version: v2.0.3, align with bcai_2.0.3.sol\n\n\n////////////////////////////////////////\n//almost done with taking out ipfs, need to implement reliable data transfer before the prior holder is allowed to be released\n//then it will be testing-pedro\n\n\n// TODO: fix the async function dependency. e.g. Need returned dataID to send Tx                          [needed for provider]\n// TODO: use this.state.RequestStartTime to record block# and narrow down the searching range of events   [need test]\n// TODO: add notification of updating request             [need test] //I did not find these, I have an update but not working fully so I did not add it to this update --Pedro\n// TODO: add button for cancel request , stop providing   [need test] //Tested no bugs found --Pedro\n\n// TODO: update appearance -- material-ui\n\n\nimport React, { Component } from \"react\";\nimport TaskContract from \"./contracts/TaskContract.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\nimport t from 'tcomb-form';\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport io from 'socket.io-client';\n//import openSocket from 'socket.io-client';\n\nimport \"./App.css\";\nimport { async, longStackSupport } from \"q\";\n//import { AsyncResource } from \"async_hooks\";\n//import { Accounts } from \"web3-eth-accounts/types\";\n//import { userInfo } from \"os\";\nconst hex2ascii = require('hex2ascii')\n\n/*\nconst FormSchema = t.struct({\n  time: t.Number,\n  target: t.Number,\n  price: t.Number,\n  account: t.String\n})*/\n\nclass App extends Component {\n  state = {\n    //web3, account, contract instance, update later by setState()\n    web3: null,\n    accounts: null,\n    myAccount: null,\n    myContract: null,\n    debug: false,\n    count: 0,\n\n    //user level variable\n    mode: \"USER\",\n    events: [],\n    ValidationResult: false,\n    Time: 0,\n    Target: 0,\n    Price: 0,\n    dataID: null,\n    resultID: null, //TODO\n    RequestStartTime: 0,\n\n    //variables to display status\n    providerCount: 0,\n    pendingCount: 0,\n    validatingCount: 0,\n    providingCount: 0,\n    providerList: null,\n    \n  };\n\n  constructor(props) {\n    super(props)\n    this.state = { mode: \"USER\", };\n    //the following bind enable calling the function directly using func() syntax\n    //NOTE: adding bind for new added functions is necessary\n    //If missed bind may result in error : \"cannot access property of undefined\"\n    this.captureFile = this.captureFile.bind(this);\n    this.showPools = this.showPools.bind(this);\n    this.ListoutPool = this.ListoutPool.bind(this);\n    this.DisplayNonZeroInList = this.DisplayNonZeroInList.bind(this);\n    this.TimeChange = this.TimeChange.bind(this);\n    this.TargetChange = this.TargetChange.bind(this);\n    this.PriceChange = this.PriceChange.bind(this);\n    this.submitRequest = this.submitRequest.bind(this);\n    this.submitJob = this.submitJob.bind(this);\n    this.submitValidation = this.submitValidation.bind(this);\n    this.IPFSSubmit = this.IPFSSubmit.bind(this);\n    this.IPFSDownload = this.IPFSDownload.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeAccount = this.changeAccount.bind(this);\n    this.showIDs = this.showIDs.bind(this);\n    this.addNotification = this.addNotification.bind(this);\n    this.applyAsProvider = this.applyAsProvider.bind(this);\n    this.submitValidationTrue = this.submitValidationTrue.bind(this);\n    this.submitValidationFalse = this.submitValidationFalse.bind(this);\n    this.stopJob = this.stopJob.bind(this);\n    this.stopProviding = this.stopProviding.bind(this);\n    this.buildSocket = this.buildSocket.bind(this);\n    this.DownloadInfo = this.DownloadInfo.bind(this);\n    this.notificationDOMRef = React.createRef();\n  }\n\n  //initiate the page\n  componentWillMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const Contract = truffleContract(TaskContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n      const socket = await this.buildSocket('http://localhost:3001');\n      console.log(\"here is the instance \" + instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, myContract: instance, myAccount: accounts[0], events: [] , socket , data: undefined , result: undefined})\n      this.setState({Time: 1, Price : 1, Target : 1, count : 0})\n      this.setState({RequestStartTime: 0})\n      console.log(\"contract set up!\");\n      this.showPools();\n      web3.currentProvider.on('accountsChanged', async (accounts) => {\n        const newAccount = await web3.eth.getAccounts(); \n        this.setState({accounts: newAccount });\n        console.log(accounts);\n      });\n      \n    }\n    catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n  //DidMount handel the task after page loaded, omitted here\n  /*   componentDidMount = async () => {\n      if (this.state.myContract) {\n  \n      }\n    } */\n  \n  /////// Supporting functions for app ////////////////////////////////////////////////////////////////////\n  //NOTE:[important] using => is very important,this pass the context without changing the this ref.\n  //https://medium.com/@thejasonfile/callback-functions-in-react-e822ebede766\n  //NOTE: event.preventDefault() is important to stop page from refreshing itself after an event happen.\n  //[Tutorial] some tricks about async and await: https://flaviocopes.com/javascript-async-await/\n  //https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////\n  TimeChange(event) {\n    event.preventDefault();\n    if (event.target.value !== \"\")   //under extreme cases, user will input empty by mistake\n      this.setState({Time: event.target.value })\n    else\n      this.setState({Time: undefined})\n  }\n  TargetChange(event) {\n    event.preventDefault();\n    if (event.target.value !== \"\")   //under extreme cases, user will input empty by mistake\n      this.setState({Target: event.target.value })\n    else\n      this.setState({Target: undefined})\n  }\n  PriceChange(event) {\n    event.preventDefault();\n    if (event.target.value !== \"\")   //under extreme cases, user will input empty by mistake\n      this.setState({Price: event.target.value })\n    else\n      this.setState({Price: undefined})\n  }\n\n  //file readers: https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n  captureFile(event) {    //using filereader to load file into buffer after selection\n    event.preventDefault()\n    console.log(\"capture file\")\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log(\"buffer\", this.state.buffer);\n    }\n  }\n/*  //call-back style code only for reference [deprecated]\n  IPFS = async () =>{\n    ipfs.files.add(this.state.buffer, (err, result) => {\n      if (err) {\n        console.log(\"IPFS Error!\", err);\n        this.addNotification(\"Error\", \"Your file could not be uploaded. Please choose a file and try again.\", \"warning\");\n        return null\n      }\n      else {\n        console.log(\"ipfsHash returned\", result[0].hash)\n        this.addNotification(\"Upload Complete\", \"File was succesfully added to IPFS! URL/DataID: \" + result[0].hash, \"success\")\n        this.setState({ dataID: result[0].hash })\n        return result[0].hash\n      }\n    })\n  }\n  */\n\n\n  buildSocket = async(loc) => {\n    var socket ;\n    if(loc.indexOf('localhost') === -1){       //if you are trying to connect to another user to get the data or result\n      socket = io.connect(\"http://\" + loc + \"/\");\n      socket.on(\"connect\", () => {\n        socket.emit('request', this.state.myIP);\n      });\n      socket.on('transmitting' + this.state.myIP, (tag , dat)=>{\n        console.log(\"Got:transmitting and tag:\" + tag + \" and data:\" + dat + \" was received.\")\n        if(dat !== undefined){                     \n            socket.emit('recieved', this.state.myIP); \n            console.log(\"emit:recieved msg:\" + this.state.myIP);\n            if(tag ==\"data\"){\n                this.setState({data: dat});\n            }\n            if(tag ==\"result\"){\n                this.setState({result: dat});\n            }\n        }\n        else{ \n            socket.emit('request', this.state.myIP);\n            console.log('emit:request msg:' + this.state.myIP); \n        }\n      });\n      socket.on('fin', (msg) => {\n        console.log(\"Got:fin and msg:\" + msg);\n        if((msg === \"data\" && this.state.data === undefined) || (msg === \"result\" && this.state.result === undefined)){ \n          socket.emit('request', this.state.myIP); \n          console.log('emit:request msg:' + this.state.myIP);\n        }\n        else{\n            console.log(\"Finished and the socket will close now\")\n            socket.disconnect(true);\n        }\n      });\n    }\n    else{\n      socket = io(loc);\n      socket.on('whoAmI', (msg) =>{\n        console.log(\"whoAmI just fired : \" + msg)\n        console.log(typeof msg);\n        this.setState({myIP : msg});\n      });\n      socket.on('release'+this.state.myIP , () => {\n        if(this.state.mode === \"WORKER\"){\n        //  this.state.myContract.releaseProvider();\n        }\n      });\n    }\n    return socket;                             //return so that we can still interact with it later on\n  }\n  \n  //Wrap the IPFS api into a promise version, thus can be handled easily later.\n  IPFSupload = async() => {\n    return new Promise((resolve, reject) => {\n      ipfs.files.add(this.state.buffer, (err, result) => {\n        if (err) { reject(err) }    //if err, handle using reject function\n        else { resolve(result) }    //if no err, handle using resolve\n      })                            //NOTE: resolve and rej is provided where IPFSupload is called.\n    })\n  }\n  \n  IPFSDownload = async(event) => {\n    var tag;\n    if(event.target.name === \"data\"){\n      tag = this.state.dataID;\n    }\n    if(event.target.name === \"result\"){\n      tag = this.state.resultID;\n    }\n    return new Promise((resolve, reject) => {\n      ipfs.files.get(tag, (err, result) => {\n        if (err) { reject(err) }    //if err, handle using reject function\n        else { resolve(result) }    //if no err, handle using resolve\n      })                            //NOTE: resolve and rej is provided where IPFSupload is called.\n    })\n  }\n\n  DownloadInfo = async(event) => {\n    var tag = undefined;\n    if(event.target.name === \"data\"){\n      tag = this.state.dataID;\n    }\n    if(event.target.name === \"result\"){\n      tag = this.state.resultID;\n    }\n    var tempSocket = await this.buildSocket(tag);\n    tempSocket.emit(\"request\", this.state.myIP);\n    console.log(this.state);\n    return tempSocket;\n  }\n\n  //submit the file in buffer to the IPFS api\n  //NOTE: wrap the callback function file.add() into a promiss-pattern call, see details in below link.\n  //https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee\n  IPFSSubmit =  async (event) => {  //declare this as async and it will return a promise, even not explicitly\n    event.preventDefault();   //stop refreshing\n    console.log(\"submiting...\")\n    this.addNotification(\"Uploading file...\", \"Awaiting response from IPFS\", \"info\");\n    if(this.state.mode === \"USER\"){\n      this.setState({dataID : this.state.myIP});\n    }\n    else{\n      this.setState({resultID : this.state.myIP});\n    }\n    this.state.socket.emit(\"setupMode\", this.state.mode);\n    this.state.socket.emit('setupBuffer', this.state.buffer);\n    console.log(this.state.buffer);\n    console.log(typeof this.state.buffer);\n    return this.state.myIP;\n    /*let returnHash = await this.IPFSupload()\n      .then(result => {\n        return result[0].hash\n      }).catch(err => {\n        console.log(\"IPFS Error!\", err);\n        return undefined\n      })\n    if (returnHash !== undefined){\n      console.log(\"ipfsHash returned\", returnHash)\n      this.addLongNotification(\"Upload Complete\", \"File was succesfully added to IPFS! URL/DataID: \" + returnHash, \"success\")\n      this.setState({ dataID: returnHash })\n      return returnHash\n    }\n    else {\n      this.addNotification(\"Error\", \"Your file could not be uploaded. Please choose a file and try again.\", \"warning\");\n      return undefined\n    }*/\n  }\n\n\n  //seach for all events related to current(provider) addr, return the reqAddrs\n  matchReq = async (provAddr) => {\n    let reqAddr = await this.state.myContract.getPastEvents(\"allEvents\", {fromBlock: this.state.RequestStartTime, toBlock: 'latest'})\n      .then(pastEvents => { //NOTE:[IMPORTANT] this.state.event is not updated in this stage\n        console.log(\"returned all events:\", pastEvents) \n        if (pastEvents === undefined) return undefined\n        else {\n          // Look for pairing info events\n          for (var i = pastEvents.length - 1; i >= 0; i--) {\n            console.log(\"------------\", this.state.web3.utils.hexToAscii(pastEvents[i].args.info))\n            console.log(  \"prov\", pastEvents[i].args.provAddr)\n            console.log(  \"req\",  pastEvents[i].args.reqAddr)\n            // Request Addr exist and provAddr matches\n            if (pastEvents[i].args.reqAddr && provAddr === pastEvents[i].args.provAddr ) {\n                return pastEvents[i].args.reqAddr\n            }\n          }\n          return undefined  // not find\n        }\n      })\n      .catch(err => {return err})\n      console.log(reqAddr)\n      return reqAddr\n  }\n\n  //upload the file to IPFS and send the TX at the same time. No addtional button is needed\n  submitRequest = async (event) => {\n    event.preventDefault();\n    //Combine the startRequest with the IPFS, so user do not need click additional button\n    //////////////////////////////////////////need to add notifications in the future since ipfssubmit wil no longer be used ////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    let returnHash = await this.IPFSSubmit(event);\n    //let returnHash = this.state.myIP; //this is the new one and will be commented until time for testing\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    if (returnHash !== undefined){\n      this.state.myContract.startRequest(this.state.Time, this.state.Target,\n        this.state.Price, this.state.web3.utils.asciiToHex(this.state.myIP),\n        { from: this.state.myAccount, value: this.state.Price })\n        .then(ret => {\n          console.log(ret);\n          this.addLongNotification(\"Request Submission Succeed\", \"Request submitted to contract.\", \"success\")\n          var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n          this.setState({RequestStartTime : StartTime})\n          console.log(\"Event Tracking start at #\", this.state.RequestStartTime)\n        })\n        .catch(err => {\n          console.log(err);\n          this.addNotification(\"Request Submission Failed\", \"Please check your configuration\", \"warning\")\n        })\n    }\n    else {\n      console.log(\"IPFS return Hash undefined\")\n    }\n//    this.addNotification(\"Sending Request to Ethereum Blockchain\", \"You will be notified when the tx is finished\", \"info\");\n    \n    //print output only after the state setting\n    console.log(\"maxTime = \",   this.state.Time);\n    console.log(\"minTarget = \", this.state.Target);\n    console.log(\"maxPrice = \",  this.state.Price);\n    console.log(\"dataID = \",    this.state.dataID);\n  }\n\n\n  //submitJob will check whether you are assigned a task first.\n  //Only if you are assigned, it will send the TX\n  //This check is also done in smart contract, you cannot submit result to other's task.\n  //Given that, checking in client is still necessary because checking onchain consumes gas.\n  submitJob = async (event) => {\n    event.preventDefault();\n    let reqAddr = await this.matchReq(this.state.myAccount)\n    console.log(\"RequestAddr = \", reqAddr)\n    if (reqAddr === undefined){\n      this.addNotification(\"Result Submission Failed\", \"You are not assigned a task\", \"warning\")\n    }\n    else {\n      let resultHash = await this.IPFSSubmit(event)\n      if (resultHash !== undefined){\n        console.log(\"ResultHash = \", resultHash)\n        this.state.myContract.completeRequest(reqAddr, this.state.web3.utils.asciiToHex(resultHash),\n          { from: this.state.myAccount, gas:500000 }).then(ret => {\n            console.log(\"Submit Result Return:\", ret);\n            var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n            this.setState({RequestStartTime : StartTime})\n            this.addNotification(\"Result Submission Succeed\", \"Work submitted to contract\", \"success\")\n          })\n      }\n      else { console.log(\"Failed to submit to IPFS\")}\n    }\n  }\n\n  stopJob(event) {\n    event.preventDefault();\n    this.state.myContract.stopRequest({from: this.state.myAccount})\n    .then(ret => {\n     // this.addNotification(\"Successfully removed job\")\n      console.log(\"Job removed from pendingPool\");\n    })\n    .catch(err => {\n      console.log(err)\n      //this.addNotification(\"Attempt to remove job failed\")\n    })\n  }\n\n  submitValidationTrue (event) {\n    event.preventDefault();\n    this.setState({ValidationResult: true})\n    this.submitValidation(event)\n  }\n\n  submitValidationFalse (event){\n    event.preventDefault();\n    this.setState({ValidationResult: false})\n    this.submitValidation(event)\n  }\n\n  submitValidation = async (event) => {\n    event.preventDefault();\n    let req = await this.matchReq(this.state.myAccount)\n    console.log(\"submit vali for: \", req);\n    if (req === undefined){\n      this.addNotification(\"Validation Submission Failed\", \"You are not assigned as Validator\", \"warning\")\n    }\n    else {\n      console.log(\"submit result = \", this.state.ValidationResult)\n      this.state.myContract.submitValidation(req, this.state.ValidationResult,\n        { from: this.state.myAccount, gas: 200000 })\n        .then(ret => {\n          //var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n          //this.setState({RequestStartTime : StartTime})\n          console.log(ret);\n          this.addNotification(\"Validation Submission Succeeded\", \"Validation submitted to contract\", \"success\")\n        })\n        .catch(err => { //most common err here is out-of-gas VM error\n          console.log(err);\n          this.addNotification(\"Validation Submission Error!\", \"Please check console for error\", \"warning\")\n        })\n    }\n  }\n\n  applyAsProvider(event) {\n    event.preventDefault();\n    this.addNotification(\"Worker application submitted!\", \"Stand by for approval from the contract\", \"info\")\n    this.state.myContract.startProviding(this.state.Time, this.state.Target,\n      this.state.Price, { from: this.state.myAccount })\n      .then(ret => {\n        this.addNotification(\"Worker application approved\", \"Your computer is now registered on the blockchain\", \"success\")\n        console.log(\"Submit Result Return:\", ret);\n        var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n        this.setState({RequestStartTime : StartTime})\n      })\n      .catch(err => {\n        console.log(err)\n        this.addNotification(\"Worker application failed\", \"Please check your configuration\", \"warning\")\n      })\n  }\n\n  stopProviding(event)  {\n    event.preventDefault();\n    this.state.myContract.stopProviding({from: this.state.myAccount})\n    .then(ret => {\n      //this.addNotification(\"Successfully stopped working\")\n      console.log(\"Worker removed from providerPool\");\n    })\n    .catch(err => {\n      console.log(err)\n      //this.addNotification(\"Attempt to stop working failed\")\n    })\n  }\n\n  changeMode(event) {\n    event.preventDefault()\n    if (this.state.mode === \"USER\"){\n      this.setState({ mode: \"WORKER\" })\n      this.setState({ count: 0, myAccount: this.state.accounts[0]})\n    } \n    else if (this.state.mode === \"WORKER\"){\n      this.setState({ mode: \"USER\" })\n      this.setState({ count: 0, myAccount: this.state.accounts[0]})\n    } \n    else throw String(\"Setting mode error!\")\n  }\n\n  changeAccount(event) {\n    event.preventDefault();\n    this.setState({ myAccount: this.state.accounts[event.target.value] ,\n    count: event.target.value})\n  }\n\n  downloadEvent =  async (event) => {\n    event.preventDefault();\n    var tag = event.target.name\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    let returnVal = await this.DownloadInfo(event) //this is the update and will be commented out until I am ready to test\n    //let returnVal = await this.IPFSDownload(event)\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      .then(result => {\n        return result;\n      }).catch(err => {\n        console.log(\"IPFS Error!\", err);\n        return undefined\n      })\n    //this.state.socket.emit(tag, returnVal);\n    if(tag === \"data\"){\n      this.state.socket.emit(tag, this.state.data);\n    }\n    if(tag === \"result\"){\n      this.state.socket.emit(tag, this.state.result);\n    }\n  }\n\n  ////// Supporting functions for display //////////////////////////////////////////////////////////////////\n  showPools() {\t\t//optional [--list] \n    this.state.myContract.getProviderPool.call().then(provPool => {\n      console.log(\"=======================================================\");\n      console.log(\"Active provider pool: Total = \", provPool.length);\n      console.log(provPool);\n      this.setState({ providerCount: provPool.length })\n      this.setState({ providerList: provPool })\n//      return provPool;\n//    }).then(provPool => {\n//      if (provPool.length > 0) return this.ListoutPool(provPool, 'provider');\n    })\n\n\n    this.state.myContract.getPendingPool.call().then(reqPool => {\n      console.log(\"=======================================================\")\n      console.log(\"Pending pool:  Total = \", reqPool.length);\n      console.log(reqPool);\n      this.setState({ pendingCount: reqPool.length })\n      //return reqPool;\n    //}).then(reqPool => {\n      //if (reqPool.length > 0) return this.ListoutPool(reqPool, 'request');\n    })\n\n    this.state.myContract.getProvidingPool.call().then(providingPool => {\n      console.log(\"=======================================================\")\n      console.log(\"Providing pool:  Total = \", providingPool.length);\n      console.log(providingPool);\n      this.setState({ providingCount: providingPool.length })\n      //return providingPool;\n//    }).then(providingPool => {\n      //if (providingPool.length > 0) return this.ListoutPool(providingPool, 'request');\n    })//.then(function(){\n\n    this.state.myContract.getValidatingPool.call().then(valiPool => {\n      console.log(\"=======================================================\")\n      console.log(\"Validating pool:  Total = \", valiPool.length);\n      console.log(valiPool);\n      this.setState({ validatingCount: valiPool.length })\n//      return valiPool;\n      //})\n//    }).then(valiPool => {\n      //if (valiPool.length > 0) return this.ListoutPool(valiPool, 'request');\n    })\n  }\n\n  ListoutPool(Pool, type) {\t\t//--list [--debug]\n    //console.log(\"List out Pool\")\n    if (type === 'provider') {\n      return this.state.myContract.listProviders.call(Pool)\n        .then(proList => {\n          console.log(\"-----------------------------------------------------\")\n          this.DisplayNonZeroInList(proList, 'provider');\n        })\n    }\n    else if (type === 'request') {\n      return this.state.myContract.listRequests.call(Pool)\n        .then(pendList => {\n          console.log(\"-----------------------------------------------------\")\n          this.DisplayNonZeroInList(pendList, 'request');\n        })\n    }\n    else throw new Text(\"Not supported type!\")\n  }\n\n  DisplayNonZeroInList(List, type) {\n    if (type === 'request')\n      for (var i = 0; i < List.length; i++) {\n        if (List[i]['addr'] !== 0) {\n          if (this.state.debug) {\n            console.log(List[i]);\n            console.log(\"-----------------------------------------------------\")\n          } else {\n            //simple print:\n            console.log(\"reqID = \", List[i]['reqID']);\n            console.log(\"addr = \", List[i]['addr']);\n            console.log(\"provider = \", List[i]['provider']);\n            console.log(\"status = \", List[i]['status']);\n            console.log(\"-----------------------------------------------------\")\n          }\n        }\n      }\n    else if (type === 'provider')\n      for (var j = 0; j < List.length; j++) {\n        if (List[j]['addr'] !== 0) {\n          if (this.state.debug) {\n            console.log(List[j]);\n            console.log(\"-----------------------------------------------------\")\n          } else {\n            console.log(\"provD = \", List[j]['provID']);\n            console.log(\"addr = \", List[j]['addr']);\n            console.log(\"available = \", List[j]['available']);\n            console.log(\"-----------------------------------------------------\")\n          }\n        }\n      }\n    else throw new Text('Not supported type for display')\n  }\n\n\n\n\n  // Workflow:\n\n\n  // Some bugs to note:\n  // Validating pool isnt always cleared\n\n  // For validators, account[3] is always skipped, making the validators accounts 1, 2, and 4\n\n  // only 1 validator is currently working - this is because ctrct.getPastEvents() only\n  // gets the events that were emitted within the last call to the contract on the blockchain\n  // - any events emitted before that call are erased and must be fetched in other ways.\n\n  // The number of provider pool sometimes spontaneously increments when performing certain tasks\n\n  // The code to watch for events needs to be changed entirely most likely\n\n\n\n\n  //USER\n  // Ensure User mode is active\n  // choose job file \n  // uploads file to ipfs\n  // [OPTIONAL] fill out time target price and account\n  // submit task to contract\n  // eventually check status will print the dataID to fetch from IPFS\n\n  //PROVIDER\n  // Ensure Worker mode is active\n  // look for notification with dataID/IPFS Hash\n  // Fetch the data from ipfs\n  // do the computational work to get result data \n  // choose result data file\n  // upload result file to ipfs\n  // Submit result to contract\n\n  //NEW APPLICANT\n  // Ensure Worker mode is active\n  // Fill out the time, target and price, and make sure the right account is selected\n  // Hit Apply to Become a Provider\n  // Await notification \n\n\n\n  // Checking status of account. \n  checkEvents = async () => {\n//    console.log(this.state.myContract);\n    //let contractEvent = this.state.myContract.PairingInfo();\n    let pastEvents = await this.state.myContract.getPastEvents(\"allEvents\", {fromBlock:  this.state.RequestStartTime, toBlock: 'latest'});\n    console.log(\"Event range: \", this.state.RequestStartTime)\n    console.log(\"All events:\", pastEvents)\n\n    this.setState({\n        events: pastEvents\n    });\n    //this.setState({ events: this.state.events.push(pastEvents)})\n    //console.log('here are th events')\n    //console.log(this.state.events)\n    // For pairing info events\n    for (var i = 0; i < this.state.events.length; i++) {\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Request Added\"){\n        this.setState({dataID : hex2ascii(this.state.events[i].args.extra)});\n      }\n      // Request Assigned\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Request Assigned\") {\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Provider Found\", \"Your task is being completed\", \"success\")\n        }\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addLongNotification(\"You Have Been Assigned A Task\", \"You have been chosen to complete a request. The IPFS data ID is: \" + this.state.dataID , \"info\");\n        }\n      }\n\n      // Request Computation Complete\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Request Computation Completed\") {\n        this.setState({resuldID : this.state.events[i].args.extra});\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Awaiting validation\", \"Your task is finished and waiting to be validated\", \"info\")\n        }\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"Awaiting validation\", \"You have completed a task an are waiting for validation\"\n            + this.state.events[i].args.reqAddr, \"info\");\n        }\n      }\n\n      // Validation Assigned to Provider\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Validation Assigned to Provider\") {\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Validator Found\", \"A validator was found for your task but more are still needed\", \"info\")\n        }\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addLongNotification(\"You are a validator\", \"You need to validate the task as true or false. The IPFS id is:\"\n            + hex2ascii(this.state.events[i].args.extra), \"info\");\n            this.setState({resultID : hex2ascii(this.state.events[i].args.extra)});\n            console.log(hex2ascii(this.state.events[i].args.extra));\n            this.setState({dataID : undefined});\n        }\n      }\n\n      // Not Enough validators\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Not Enough Validators\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Not Enough Validators\", \"More validators are needed before the result can be sent to you\"\n            + this.state.events[i].args.provAddr, \"warning\")\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"Not Enough Validators\", \"There were not enough validators to verfiy your resulting work. Please wait.\"\n            + this.state.events[i].args.reqAddr, \"info\");\n        }\n      }\n\n\n      // Enough Validators\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Enough Validators\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"All Validators Found\", \"Your task is being validated. Please hold.\", \"success\")\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"All Validators Found\", \"Your work is being validated. Please hold.\", \"info\");\n        }\n      }\n\n\n      // Validator Signed\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Validator Signed\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Validator signed\", \"Your task is being validated\", \"info\")\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"You Have signed your validation\", \"You have validated the request from address\", \"info\");\n        }\n      }\n\n\n      // Validation Complete\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Validation Complete\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addLongNotification(\"Job Done\", \"Please download your resultant file from IPFS using the hash \" + hex2ascii(this.state.events[i].args.extra), \"success\")\n          this.setState({resultID : hex2ascii(this.state.events[i].args.extra)});\n          this.setState({dataID : undefined});\n\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"Work Validated!\", \"Your work was validated and you should receive payment soon\", \"info\");\n        }\n      }\n    }\n\n    /*   contractEvent.watch(function (error, result) {\n        if (!error) {\n          console.log('event was emited')\n          console.log(result);\n        }\n        else {\n          console.log(error);\n        }\n      }); */\n  }\n\n  addNotification(title, message, type) {\n    this.notificationDOMRef.current.addNotification({\n      title: title,\n      message: message,\n      type: type,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: { duration: 5000 },\n      dismissable: { click: true }\n    });\n  }\n\n  addLongNotification(title, message, type) {\n    this.notificationDOMRef.current.addNotification({\n      title: title,\n      message: message,\n      type: type,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: { duration: 20000 },\n      dismissable: { click: true }\n    });\n  }\n\n  showApplyButton() {\n    if (this.state.mode === 'WORKER') {\n      return (\n        <button onClick={this.applyAsProvider} style={{ margin: 10 }}>\n          Submit Provider Application\n          </button>\n      );\n    }\n  }\n\n  showValidationButtons() {\n    if (this.state.mode === 'WORKER') {\n      return (\n        <div>\n          <h2> VALIDATIONS </h2>\n          <p>\n          <button onClick={this.submitValidationTrue} style={{ marginBottom: 5 , marginRight : 10}} >\n            TRUE\n          </button>\n          <button onClick={this.submitValidationFalse} style={{ marginBottom: 5 , marginLeft: 10}}>\n            FALSE\n          </button>\n          </p>\n          Current Validation Result: {'' + this.state.ValidationResult}\n        </div>\n      );\n    }\n  }\n\n  showIDs(){\n    if(this.state.dataID !== undefined && this.state.resultID === undefined){\n      return(\n      <div>\n        <p>\n          DataID is: {\"\" + this.state.dataID}\n        </p>\n        <form onSubmit={this.downloadEvent}  name=\"data\">\n          <button>Download the data</button>  \n        </form>\n      </div>\n      );\n    }\n    if(this.state.resultID !== undefined && this.state.dataID === undefined){\n      return(\n      <div>\n        <p>resultID is: {\"\" + this.state.resultID}</p>\n        <form onSubmit={this.downloadEvent}  name=\"result\">\n          <button>Download the result</button>  \n        </form>\n      </div>\n      );\n    }\n    if(this.state.dataID !== undefined && this.state.resultID !== undefined){\n      return(\n        <div>\n          <p>\n            DataID is: {\"\" + this.state.dataID}\n          </p>\n          <form onSubmit={this.downloadEvent}  name=\"data\">\n            <button>Download the data</button>  \n          </form>\n          <p>resultID is: {\"\" + this.state.resultID}</p>\n          <form onSubmit={this.downloadEvent}  name=\"result\">\n            <button>Download the result</button>  \n          </form>\n        </div>\n        );\n    }\n  }\n\n  // apply provider or nothing\n  showSubmitButton() {\n    if (this.state.mode === 'USER') {\n      return\n    }\n    if (this.state.mode === 'WORKER') {\n      return (\n        <button onClick={this.applyAsProvider} style={{ margin: 10 }}>\n          Apply Provider\n          </button>\n      );\n    }\n  }\n  // upload script or result\n  showUploadModule() {\n    if (this.state.mode === \"USER\"){\n      return (\n        <div><h2>{\"UPLOAD TASK SCRIPT\" }</h2>\n        <form onSubmit={this.IPFSSubmit}>\n          <input type='file' onChange={this.captureFile}></input>\n          <button onClick={this.submitRequest} style={{ margin: 10 }}>\n          Submit Task\n          </button>\n          {/*<input type='submit' value=\"Upload to IPFS\"></input>*/}\n        </form></div>\n      )\n    }\n    if (this.state.mode === 'WORKER') {\n      return (\n        <div><h2>SUBMIT RESULT PACKAGE</h2>\n          <form onSubmit={this.IPFSSubmit}>\n          <input type='file' onChange={this.captureFile}></input>\n          {/*<input type='submit' value=\"Upload to IPFS\"></input>*/}\n       \n        <button onClick={this.submitJob} style={{ marginTop: 10, marginLeft: 15, marginBottom: 10 }}>\n          Submit Result\n        </button>\n        </form></div>\n      );\n    }\n  }\n  //used to align User mode with worker mode\n  showUserDivider(){\n    if (this.state.mode === \"USER\")\n      return (\n        <div style={{marginBottom: 190}}></div>\n      )\n  }\n\n  //stop providing/request buttons\n  showStopButtons(){\n    if(this.state.mode === 'WORKER'){\n      return(\n        <button onClick={this.stopProviding} style={{ margin: 10 }}>\n          Stop Working\n          </button>\n      )\n    }\n    if(this.state.mode === 'USER'){\n      return(\n        <button onClick={this.stopJob} style={{ margin: 10 }}>\n          Remove Job\n          </button>\n      )\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////\n  //components of react: https://reactjs.org/docs/forms.html  \n  render() {\n\n    this.state.mode === \"USER\" ? document.body.style = 'background:#F5F2D1;' : document.body.style = 'background:#E7F5D1;'\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <ReactNotification ref={this.notificationDOMRef} />\n        <h1 style={{ marginBottom: 30 }}>Welcome to the BCAI Dapp</h1>\n        <button onClick={this.changeMode} style={{ fontsize: 40, height:60, width: 120, marginBottom: 20 }}>{this.state.mode} MODE</button>\n\n        \n\n        <form onSubmit={this.startRequestSubmit}>\n        <h2>{this.state.mode === 'USER' ? \"SUBMIT YOUR TASK\" : \"APPLY TO BE PROVIDER\"}</h2>\n          <p><label>\n            Time : (in seconds)\n          <input type=\"number\" value={this.state.Time} onChange={this.TimeChange} />\n          </label></p>\n          <p><label>\n            Target : (0-100)\n          <input type=\"number\" value={this.state.Target} onChange={this.TargetChange} />\n          </label></p>\n          <p><label>\n            Price : (in wei)\n          <input type=\"number\" value={this.state.Price} onChange={this.PriceChange} />\n          </label></p>\n          <p>Use account:          <div> {this.state.myAccount}  </div> \n            <br></br>\n            {this.showIDs()}\n            {this.showSubmitButton()}\n          </p>\n        </form>\n        {this.showUploadModule()}\n        {this.showStopButtons()}\n        {this.showValidationButtons()}\n        {this.showUserDivider()}\n        \n\n        <h2 style={{ marginTop: 20 }}>CURRENT ACCOUNT\n        <button onClick={this.checkEvents} style={{marginLeft : 20, marginBottom: 10 }}> Check Status </button></h2>\n        \n\n        <div style={{ marginTop: 5 }}>\n          <h2 style={{ margin: 1 }}>CURRENT STATE OF CONTRACT\n          <button onClick={this.showPools} style={{marginLeft: 20}}>\n            Refresh\n          </button></h2>\n          <p>Provider Pool = {this.state.providerCount}</p>\n          <p>Pending Pool = {this.state.pendingCount}</p>\n          <p>Providing Pool = {this.state.providingCount}</p>\n          <p>Validating Pool = {this.state.validatingCount}</p>\n          \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"],"sourceRoot":""}