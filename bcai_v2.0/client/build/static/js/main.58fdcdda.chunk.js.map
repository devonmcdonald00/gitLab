{"version":3,"sources":["App.js","utils/getWeb3.js","../node_modules/web3-eth-accounts/src sync","serviceWorker.js","index.js"],"names":["hex2ascii","require","App","props","_this","Object","_home_taurus_blockchain_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_taurus_blockchain_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_taurus_blockchain_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","web3","accounts","myAccount","myContract","debug","count","mode","events","ValidationResult","Time","Target","Price","dataID","resultID","RequestStartTime","providerCount","pendingCount","validatingCount","providingCount","providerList","tempSocket","componentWillMount","_home_taurus_blockchain_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_taurus_blockchain_gitLab_bcai_v2_0_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee2","Contract","instance","socket","wrap","_context2","prev","next","getWeb3","sent","eth","getAccounts","truffleContract","TaskContract","setProvider","currentProvider","deployed","buildSocket","console","log","setState","data","undefined","result","showPools","on","_ref2","_callee","newAccount","_context","stop","_x","apply","arguments","t0","alert","_ref3","_callee3","loc","_context3","indexOf","io","connect","emit","myIP","tag","dat","msg","disconnect","ip","buffer","val","document","getElementById","click","newMode","newBuffer","abrupt","_x2","DownloadInfo","_ref4","_callee4","event","m","_context4","target","name","_x3","serverSubmit","_ref5","_callee5","_context5","preventDefault","addNotification","_x4","matchReq","_ref6","_callee6","provAddr","reqAddr","_context6","getPastEvents","fromBlock","toBlock","then","pastEvents","i","length","utils","hexToAscii","args","info","catch","err","_x5","submitRequest","_ref7","_callee7","_context7","startRequest","asciiToHex","from","value","ret","addLongNotification","StartTime","receipt","blockNumber","_x6","submitJob","_ref8","_callee8","resultHash","_context8","completeRequest","gas","_x7","submitValidation","_ref9","_callee9","req","_context9","_x8","downloadEvent","_ref10","_callee10","returnVal","_context10","_x9","checkEvents","_callee11","_context11","splice","slice","extra","captureFile","bind","_home_taurus_blockchain_gitLab_bcai_v2_0_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","TimeChange","TargetChange","PriceChange","changeMode","changeAccount","showIDs","applyAsProvider","submitValidationTrue","submitValidationFalse","stopJob","stopProviding","notificationDOMRef","React","createRef","_this2","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","_this3","stopRequest","_this4","startProviding","String","_this5","getProviderPool","provPool","getPendingPool","reqPool","getProvidingPool","providingPool","getValidatingPool","valiPool","title","message","type","current","insert","container","animationIn","animationOut","dismiss","duration","dismissable","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","onClick","style","margin","id","marginBottom","marginRight","marginLeft","onSubmit","onChange","marginTop","body","className","react_notifications_component__WEBPACK_IMPORTED_MODULE_12___default","ref","fontsize","height","width","startRequestSubmit","showSubmitButton","showUploadModule","showStopButtons","showValidationButtons","showUserDivider","Component","Promise","resolve","reject","addEventListener","_web","provider","_web2","ethereum","Web3","enable","providers","HttpProvider","webpackEmptyContext","e","Error","code","keys","module","exports","Boolean","location","hostname","match","ReactDOM","render","react_default","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58fdcdda.chunk.js","sourcesContent":["// this is the main entrance of Application\n// version: v2.1.0, align with bcai_2.1.0.sol\n\n\n// TODO: fix the async function dependency. e.g. Need returned dataID to send Tx                          [needed for provider]\n// TODO: add notification of updating request             [need test] //I did not find these --Pedro\n\n// TODO: update appearance -- material-ui\n\n// TODO: currently the stop job button will delete the result ID after a user has finished recieving their data. this needs to be replaced with an automatic method\n// TODO: add timeouts to the socket emits that ask for data to be resent (right now these are called multiple times since it takes longer for the data to be moved\n//       than for the resend message to be called)\n\nimport React, { Component } from \"react\";\nimport TaskContract from \"./contracts/TaskContract.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\n//import t from 'tcomb-form';\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport io from 'socket.io-client';\n//import openSocket from 'socket.io-client';\n\nimport \"./App.css\";\n//import { async, longStackSupport } from \"q\";\n//import { AsyncResource } from \"async_hooks\";\n//import { Accounts } from \"web3-eth-accounts/types\";\n//import { userInfo } from \"os\";\nconst hex2ascii = require('hex2ascii')\n\n/*\nconst FormSchema = t.struct({\n  time: t.Number,\n  target: t.Number,\n  price: t.Number,\n  account: t.String\n})*/\n\nclass App extends Component {\n  state = {\n    //web3, account, contract instance, update later by setState()\n    web3: null,\n    accounts: null,\n    myAccount: null,\n    myContract: null,\n    debug: false,\n    count: 0,\n\n    //user level variable\n    mode: \"USER\",\n    events: [],\n    ValidationResult: false,\n    Time: 0,\n    Target: 0,\n    Price: 0,\n    dataID: null,\n    resultID: null, //TODO\n    RequestStartTime: 0,\n\n    //variables to display status\n    providerCount: 0,\n    pendingCount: 0,\n    validatingCount: 0,\n    providingCount: 0,\n    providerList: null,\n\n    tempSocket: null, //added by TL 0812, missing declaration in state.\n    \n  };\n\n  constructor(props) {\n    super(props)\n    this.state = { mode: \"USER\", };\n    //the following bind enable calling the function directly using func() syntax\n    //NOTE: adding bind for new added functions is necessary\n    //If missed bind may result in error : \"cannot access property of undefined\"\n    this.captureFile = this.captureFile.bind(this);\n    this.showPools = this.showPools.bind(this);\n    this.TimeChange = this.TimeChange.bind(this);\n    this.TargetChange = this.TargetChange.bind(this);\n    this.PriceChange = this.PriceChange.bind(this);\n    this.submitRequest = this.submitRequest.bind(this);\n    this.submitJob = this.submitJob.bind(this);\n    this.submitValidation = this.submitValidation.bind(this);\n    this.serverSubmit = this.serverSubmit.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeAccount = this.changeAccount.bind(this);\n    this.showIDs = this.showIDs.bind(this);\n    this.addNotification = this.addNotification.bind(this);\n    this.applyAsProvider = this.applyAsProvider.bind(this);\n    this.submitValidationTrue = this.submitValidationTrue.bind(this);\n    this.submitValidationFalse = this.submitValidationFalse.bind(this);\n    this.stopJob = this.stopJob.bind(this);\n    this.stopProviding = this.stopProviding.bind(this);\n    this.buildSocket = this.buildSocket.bind(this);\n    this.DownloadInfo = this.DownloadInfo.bind(this);\n    this.notificationDOMRef = React.createRef();\n  }\n\n  //initiate the page\n  componentWillMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const Contract = truffleContract(TaskContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n      const socket = await this.buildSocket('http://localhost:3001');\n      console.log(\"here is the instance \" + instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, myContract: instance, myAccount: accounts[0], events: [] , socket , data: undefined , result: undefined})\n      this.setState({Time: 1, Price : 1, Target : 1, count : 0})\n      this.setState({RequestStartTime: 0})\n      console.log(\"contract set up!\");\n      this.showPools();\n      web3.currentProvider.on('accountsChanged', async (accounts) => {\n        const newAccount = await web3.eth.getAccounts(); \n        this.setState({accounts: newAccount });\n        console.log(accounts);\n      });\n      \n    }\n    catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n \n  \n  /////// Supporting functions for app ////////////////////////////////////////////////////////////////////\n  //NOTE:[important] using => is very important,this pass the context without changing the this ref.\n  //https://medium.com/@thejasonfile/callback-functions-in-react-e822ebede766\n  //NOTE: event.preventDefault() is important to stop page from refreshing itself after an event happen.\n  //[Tutorial] some tricks about async and await: https://flaviocopes.com/javascript-async-await/\n  //https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////\n  TimeChange(event) {\n    event.preventDefault();\n    if (event.target.value !== \"\")   //under extreme cases, user will input empty by mistake\n      this.setState({Time: event.target.value })\n    else\n      this.setState({Time: undefined})\n  }\n  TargetChange(event) {\n    event.preventDefault();\n    if (event.target.value !== \"\")   //under extreme cases, user will input empty by mistake\n      this.setState({Target: event.target.value })\n    else\n      this.setState({Target: undefined})\n  }\n  PriceChange(event) {\n    event.preventDefault();\n    if (event.target.value !== \"\")   //under extreme cases, user will input empty by mistake\n      this.setState({Price: event.target.value })\n    else\n      this.setState({Price: undefined})\n  }\n\n  //file readers: https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n  captureFile(event) {    //using filereader to load file into buffer after selection\n    event.preventDefault()\n    console.log(\"capture file\")\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log(\"buffer\", this.state.buffer);\n    }\n  }\n\n\n  //this function will build the client sockets necessay for socket.io\n  buildSocket = async(loc) => {\n    var socket ;\n    //this is entered if the location that the server is not within the current computer\n    if(loc.indexOf('localhost') === -1){\n      \n      //create the connection\n      socket = io.connect(\"http://\" + loc + \"/\");\n      \n      //once the connection is created call to setup the connection correctly and ask for the data\n      socket.on(\"connect\", () => {\n        socket.emit('setUp', this.state.myIP);\n        socket.emit('request', this.state.myIP);\n      });\n\n      //this is called when a server send data in responce to this current computer's request\n      socket.on('transmitting' + this.state.myIP, (tag , dat)=>{\n        console.log(\"Got:transmitting and tag:\" + tag + \" and data:\" + dat + \" was received.\")\n        if(dat !== undefined){                     \n            socket.emit('recieved', this.state.myIP); \n            console.log(\"emit:recieved msg:\" + this.state.myIP);\n            if(tag === \"data\"){\n                this.setState({data: dat});\n            }\n            if(tag === \"result\"){\n                this.setState({result: dat});\n            }\n        }\n        //if the data is not recieved it will be asked for again\n        else{ \n            socket.emit('request', this.state.myIP);\n            console.log('emit:request msg:' + this.state.myIP); \n        }\n      });\n\n      //this is recieved after the server has send the data\n      //if the data is not received that it will request for the data agian\n      //if the data is recieved then it will close the connection\n      socket.on('fin', (msg) => {\n        console.log(\"Got:fin and msg:\" + msg);\n        if((msg === \"data\" && this.state.data === undefined) || (msg === \"result\" && this.state.result === undefined)){ \n          socket.emit('request', this.state.myIP); \n          console.log('emit:request msg:' + this.state.myIP);\n        }\n        else{\n            console.log(\"Finished and the socket will close now\")\n            socket.disconnect(true);        }\n      });\n    }\n\n    //if you are attmepting to connect to a server that is on the current computer\n    //this is necessary for the browser to send the data to other computers and to\n    //ececute the code\n    else{\n      socket = io(loc);\n\n      //this is sent so that the browser is able to learn what its public ip is\n      //this is not easily gotten so the local server deals with it\n      socket.on('whoAmI', (msg) =>{\n        if(this.state.ip === undefined){\n          console.log(\"whoAmI just fired : \" + msg)\n          console.log(typeof msg);\n          this.setState({myIP : msg});\n          if(this.state.buffer !== undefined){\n            socket.emit('setupMode', this.state.mode);\n            socket.emit(\"setupBuffer\", this.state.buffer);\n          }\n        }\n        else{\n          socket.emit(\"reset\");\n        }\n      });\n\n      //this is triggered when the local server does not correctly receive data\n      socket.on('resendData', () => {\n        socket.emit('data', this.state.data);\n      });\n\n      //this is triggered when the local server does not correctly receive data\n      socket.on('resendResult', () => {\n        socket.emit('result', this.state.result);\n      });\n\n      //this is triggered when the current mode is validator and the result has\n      //been found by the local server\n      socket.on('uploadVal', (val) => {\n        if(this.state.mode === 'WORKER'){\n          if(val){\n            document.getElementById(\"trueButton\").click();\n          }\n          else{\n            document.getElementById('falseButton').click();\n          }\n        }\n      });\n\n      //this is triggered when the current mode is proider and the code has been trained\n      //and needs to be uploaded\n      socket.on('uploadResult', (data) => {\n        console.log('recieved uploadResult')\n        this.setState({buffer : data});\n        console.log(this.state.buffer);\n        if(this.state.mode === 'WORKER'){  \n          document.getElementById('submitButton').click();\n        }\n        if(this.state.mode === 'USER'){\n          document.getElementById('modeButton').click();\n          document.getElementById('submitButton').click();\n        }\n      })\n\n      //if the browser has been disconnected this will trigger to make sure that the \n      //browser has the state data\n      socket.on( \"browserReconnect\" , (newMode, newBuffer) => {\n        //the integer version of mode selection is defined in localEnv.js \n        //(copied here for ease of understanding)\n        //0-provider\n        //1-validator\n        //2-user\n        if( (newMode === 0 || newMode === 1) && this.state.mode !== \"WORKER\" ){\n          document.getElementById('modeButton').click();\n        }\n        if( (newBuffer !== undefined || newBuffer !== null) && this.state.buffer === undefined){\n          this.setState({buffer : newBuffer});\n          console.log(this.state.buffer)\n        }\n      });\n    }\n    return socket;//return so that we can still interact with it later on\n  }\n\n  //It will create a socket and depending on the current mode it will send it with that\n  //specific tag\n  DownloadInfo = async(event) => {\n    var tag = undefined;\n    var m = undefined;\n    if(event.target.name === \"data\"){\n      tag = this.state.dataID;\n      m = \"WORKER\";\n    }\n    if(event.target.name === \"result\"){\n      tag = this.state.resultID;\n      if(this.state.mode === \"USER\"){\n        m = \"USER\";\n      }\n      else{\n        m = \"VALIDATOR\";\n            }\n    }\n    var tempSocket = await this.buildSocket(tag);\n    this.state.socket.emit(\"setupMode\", m);\n    tempSocket.emit(\"request\", this.state.myIP);\n    console.log(this.state);\n    this.setState({tempSocket : tempSocket});\n    return tempSocket;\n  }\n\n  //submit the file in buffer to the local server\n  //NOTE: wrap the callback function file.add() into a promiss-pattern call, see details in below link.\n  //https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee\n  serverSubmit =  async (event) => {  //declare this as async and it will return a promise, even not explicitly\n    event.preventDefault();   //stop refreshing\n    console.log(\"submiting...\")\n    this.addNotification(\"Uploading file...\", \"Awaiting response from server\", \"info\");\n    if(this.state.mode === \"USER\"){\n      this.setState({dataID : this.state.myIP});\n    }\n    else{\n      this.setState({resultID : this.state.myIP});\n    }\n    //this.state.socket.emit(\"setupMode\", this.state.mode);\n    this.state.socket.emit('setupBuffer', this.state.buffer);\n    console.log(this.state.buffer);\n    console.log(typeof this.state.buffer);\n    return this.state.myIP;\n  }\n\n\n  //seach for all events related to current(provider) addr, return the reqAddrs\n  matchReq = async (provAddr) => {\n    let reqAddr = await this.state.myContract.getPastEvents(\"allEvents\", {fromBlock: this.state.RequestStartTime, toBlock: 'latest'})\n      .then(pastEvents => { //NOTE:[IMPORTANT] this.state.event is not updated in this stage\n        console.log(\"returned all events:\", pastEvents) \n        if (pastEvents === undefined) return undefined\n        else {\n          // Look for pairing info events\n          for (var i = pastEvents.length - 1; i >= 0; i--) {\n            console.log(\"------------\", this.state.web3.utils.hexToAscii(pastEvents[i].args.info))\n            console.log(  \"prov\", pastEvents[i].args.provAddr)\n            console.log(  \"req\",  pastEvents[i].args.reqAddr)\n            // Request Addr exist and provAddr matches\n            if (pastEvents[i].args.reqAddr && provAddr === pastEvents[i].args.provAddr ) {\n                return pastEvents[i].args.reqAddr\n            }\n          }\n          return undefined  // not find\n        }\n      })\n      .catch(err => {return err})\n      console.log(reqAddr)\n      return reqAddr\n  }\n\n  //upload the file to localserver and send the TX at the same time. No addtional button is needed\n  submitRequest = async (event) => {\n    event.preventDefault();\n    //Combine the startRequest with the local server, so user do not need click additional button\n    let returnHash = await this.serverSubmit(event);\n    if (returnHash !== undefined){\n      this.state.myContract.startRequest(this.state.Time, this.state.Target,\n        this.state.Price, this.state.web3.utils.asciiToHex(this.state.myIP),\n        { from: this.state.myAccount, value: this.state.Price })\n        .then(ret => {\n          console.log(ret);\n          this.addLongNotification(\"Request Submission Succeed\", \"Request submitted to contract.\", \"success\")\n          var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n          this.setState({RequestStartTime : StartTime})\n          console.log(\"Event Tracking start at #\", this.state.RequestStartTime)\n          this.setState({resultID :undefined, result: undefined});\n        })\n        .catch(err => {\n          console.log(err);\n          this.addNotification(\"Request Submission Failed\", \"Please check your configuration\", \"warning\")\n        })\n    }\n    else {\n      console.log(\"IP Address undefined\")\n    }\n//    this.addNotification(\"Sending Request to Ethereum Blockchain\", \"You will be notified when the tx is finished\", \"info\");\n    \n    //print output only after the state setting\n    console.log(\"maxTime = \",   this.state.Time);\n    console.log(\"minTarget = \", this.state.Target);\n    console.log(\"maxPrice = \",  this.state.Price);\n    console.log(\"dataID = \",    this.state.dataID);\n  }\n\n\n  //submitJob will check whether you are assigned a task first.\n  //Only if you are assigned, it will send the TX\n  //This check is also done in smart contract, you cannot submit result to other's task.\n  //Given that, checking in client is still necessary because checking onchain consumes gas.\n  submitJob = async (event) => {\n    event.preventDefault();\n    let reqAddr = await this.matchReq(this.state.myAccount)\n    console.log(\"RequestAddr = \", reqAddr)\n    if (reqAddr === undefined){\n      this.addNotification(\"Result Submission Failed\", \"You are not assigned a task\", \"warning\")\n    }\n    else {\n      let resultHash = await this.serverSubmit(event)\n      if (resultHash !== undefined){\n        console.log(\"ResultHash = \", resultHash)\n        this.state.myContract.completeRequest(reqAddr, this.state.web3.utils.asciiToHex(resultHash),\n          { from: this.state.myAccount, gas:500000 }).then(ret => {\n            console.log(\"Submit Result Return:\", ret);\n            var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n            this.setState({RequestStartTime : StartTime})\n            this.addNotification(\"Result Submission Succeed\", \"Work submitted to contract\", \"success\")\n\n            //disconnect the socket\n            this.state.tempSocket.emit(\"goodBye\", this.state.myIP);\n            this.state.tempSocket.disconnect(true);\n            this.setState({data : undefined , dataID : undefined , tempSocket: undefined});\n          })\n      }\n      else { console.log(\"Failed to submit to local server\")}\n    }\n  }\n\n  stopJob(event) {\n    event.preventDefault();\n    console.log(\"stopJob: \" + this.state.resultID)\n    if(this.state.resultID === undefined){\n      this.state.myContract.stopRequest({from: this.state.myAccount})\n      .then(ret => {\n        console.log(\"Job removed from pendingPool\");\n        this.state.socket.emit(\"dumpBuffer\");\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //NOTE!!!!!! this is curently done in order to delete the resultID once a job has been finished\n    //this needs to be automated some how\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    else if(this.state.resultID !== undefined){\n      this.state.tempSocket.emit(\"goodBye\", this.state.myIP);\n      this.state.tempSocket.disconnect(true);\n      this.setState({result : undefined , resultID : undefined , tempSocket: undefined});\n    }\n  }\n\n  submitValidationTrue (event) {\n    event.preventDefault();\n    this.setState({ValidationResult: true});\n    this.submitValidation(event);\n    this.state.socket.emit(\"dumpBuffer\");\n  }\n\n  submitValidationFalse (event){\n    event.preventDefault();\n    this.setState({ValidationResult: false});\n    this.submitValidation(event);\n    this.state.socket.emit(\"dumpBuffer\");\n  }\n\n  submitValidation = async (event) => {\n    event.preventDefault();\n    let req = await this.matchReq(this.state.myAccount)\n    console.log(\"submit vali for: \", req);\n    if (req === undefined){\n      this.addNotification(\"Validation Submission Failed\", \"You are not assigned as Validator\", \"warning\")\n    }\n    else {\n      console.log(\"submit result = \", this.state.ValidationResult)\n      this.state.myContract.submitValidation(req, this.state.ValidationResult,\n        { from: this.state.myAccount, gas: 200000 })\n        .then(ret => {\n          console.log(ret);\n          this.addNotification(\"Validation Submission Succeeded\", \"Validation submitted to contract\", \"success\")\n\n          //disconnect the temp socket\n          this.state.tempSocket.emit(\"goodBye\", this.state.myIP);\n          this.state.tempSocket.disconnect(true);\n          this.setState({result : undefined , resultID : undefined , tempSocket: undefined});\n        })\n        .catch(err => { //most common err here is out-of-gas VM error\n          console.log(err);\n          this.addNotification(\"Validation Submission Error!\", \"Please check console for error\", \"warning\")\n        })\n    }\n  }\n\n  applyAsProvider(event) {\n    event.preventDefault();\n    this.addNotification(\"Worker application submitted!\", \"Stand by for approval from the contract\", \"info\")\n    this.state.myContract.startProviding(this.state.Time, this.state.Target,\n      this.state.Price, { from: this.state.myAccount })\n      .then(ret => {\n        this.addNotification(\"Worker application approved\", \"Your computer is now registered on the blockchain\", \"success\")\n        console.log(\"Submit Result Return:\", ret);\n        var StartTime = ret.receipt.blockNumber;  //record the block# when submitted, all following events will be tracked from now on\n        this.setState({RequestStartTime : StartTime})\n      })\n      .catch(err => {\n        console.log(err)\n        this.addNotification(\"Worker application failed\", \"Please check your configuration\", \"warning\")\n      })\n  }\n\n  stopProviding(event)  {\n    event.preventDefault();\n    this.state.myContract.stopProviding({from: this.state.myAccount})\n    .then(ret => {\n      console.log(\"Worker removed from providerPool\");\n    })\n    .catch(err => {\n      console.log(err)\n\n    })\n  }\n\n  changeMode(event) {\n    event.preventDefault()\n    if (this.state.mode === \"USER\"){\n      this.setState({ mode: \"WORKER\" })\n      this.setState({ count: 0, myAccount: this.state.accounts[0]})\n    } \n    else if (this.state.mode === \"WORKER\"){\n      this.setState({ mode: \"USER\" })\n      this.setState({ count: 0, myAccount: this.state.accounts[0]})\n    } \n    else throw String(\"Setting mode error!\")\n  }\n\n  changeAccount(event) {\n    event.preventDefault();\n    this.setState({ myAccount: this.state.accounts[event.target.value] ,\n    count: event.target.value})\n  }\n\n  downloadEvent =  async (event) => {\n    event.preventDefault();\n    var tag = event.target.name\n    let returnVal = await this.DownloadInfo(event)\n      .then(result => {\n        return result;\n      }).catch(err => {\n        console.log(\"Download Error!\", err);\n        return undefined\n      })\n    console.log(returnVal);\n    if(tag === \"data\"){\n      this.state.socket.emit(tag, this.state.data);\n    }\n    if(tag === \"result\"){\n      this.state.socket.emit(tag, this.state.result);\n    }\n  }\n\n  ////// Supporting functions for display //////////////////////////////////////////////////////////////////\n  showPools() {\t\t//optional [--list] \n    this.state.myContract.getProviderPool.call().then(provPool => {\n      console.log(\"=======================================================\");\n      console.log(\"Active provider pool: Total = \", provPool.length);\n      console.log(provPool);\n      this.setState({ providerCount: provPool.length })\n      this.setState({ providerList: provPool })\n    })\n\n    this.state.myContract.getPendingPool.call().then(reqPool => {\n      console.log(\"=======================================================\")\n      console.log(\"Pending pool:  Total = \", reqPool.length);\n      console.log(reqPool);\n      this.setState({ pendingCount: reqPool.length })\n    })\n\n    this.state.myContract.getProvidingPool.call().then(providingPool => {\n      console.log(\"=======================================================\")\n      console.log(\"Providing pool:  Total = \", providingPool.length);\n      console.log(providingPool);\n      this.setState({ providingCount: providingPool.length })\n    })\n\n    this.state.myContract.getValidatingPool.call().then(valiPool => {\n      console.log(\"=======================================================\")\n      console.log(\"Validating pool:  Total = \", valiPool.length);\n      console.log(valiPool);\n      this.setState({ validatingCount: valiPool.length })\n    })\n  }\n\n\n  // Workflow:\n\n\n  // Some bugs to note:\n  // Validating pool isnt always cleared\n\n  // For validators, account[3] is always skipped, making the validators accounts 1, 2, and 4\n\n  // only 1 validator is currently working - this is because ctrct.getPastEvents() only\n  // gets the events that were emitted within the last call to the contract on the blockchain\n  // - any events emitted before that call are erased and must be fetched in other ways.\n\n  // The number of provider pool sometimes spontaneously increments when performing certain tasks\n\n  // The code to watch for events needs to be changed entirely most likely\n\n\n\n\n  //USER\n  // Ensure User mode is active\n  // choose job file \n  // uploads file to local server\n  // [OPTIONAL] fill out time target price and account\n  // submit task to contract\n  // eventually check status will print the dataID to fetch from the server at the location of dataID\n\n  //PROVIDER\n  // Ensure Worker mode is active\n  // look for notification with dataID\n  // Fetch the data from the other server\n  // do the computational work to get result data \n  // choose result data file\n  // upload result file to the local server for others to pull from\n  // Submit result to contract\n\n  //NEW APPLICANT\n  // Ensure Worker mode is active\n  // Fill out the time, target and price, and make sure the right account is selected\n  // Hit Apply to Become a Provider\n  // Await notification \n\n\n\n  // Checking status of account. \n  //note: CheckEvents has been edited to keep track of only the current transaction's information and\n  //      is used to identify the resultID and dataID if necessary for that person's specific role\n  checkEvents = async () => {\n    let pastEvents = await this.state.myContract.getPastEvents(\"allEvents\", {fromBlock:  this.state.RequestStartTime, toBlock: 'latest'});\n    console.log(\"Event range: \", this.state.RequestStartTime)\n    console.log(\"All events:\", pastEvents)\n\n    for(var i = 0 ; i < pastEvents.length; i++){\n      if((pastEvents[i].args && hex2ascii(pastEvents[i].args.info) === \"Validator Signed\" && this.state.myAccount === pastEvents[i].args.provAddr) || \n        (pastEvents[i].args && hex2ascii(pastEvents[i].args.info) === \"Validation Complete\" && this.state.myAccount === pastEvents[i].args.provAddr) ){\n        pastEvents.splice(0,i+1);\n        this.setState({dataID: undefined, resultID : undefined, events:pastEvents});\n      }\n      else if(pastEvents[i].args && hex2ascii(pastEvents[i].args.info) === \"Validation Complete\" && this.state.myAccount === pastEvents[i].args.reqAddr){\n        pastEvents.splice(0,i);\n        this.setState({dataID: undefined, events:pastEvents});\n      }\n    }\n\n    this.setState({\n        events: pastEvents\n    });\n\n    // For pairing info events\n    for (var i = 0; i < this.state.events.length; i++) {\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Request Added\" && this.state.myAccount === this.state.events[i].args.reqAddr) {\n        pastEvents.slice(0,1);\n        this.setState({events : pastEvents});\n      }\n      // Request Assigned\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Request Assigned\") {\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Provider Found\", \"Your task is being completed\", \"success\")\n        }\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addLongNotification(\"You Have Been Assigned A Task\", \"You have been chosen to complete a request. The server data ID is: \" + this.state.dataID , \"info\");\n          this.setState({dataID : hex2ascii(this.state.events[i].args.extra), resultID : undefined});\n        }\n      }\n\n      // Request Computation Complete\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Request Computation Completed\") {\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Awaiting validation\", \"Your task is finished and waiting to be validated\", \"info\")\n        }\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"Awaiting validation\", \"You have completed a task an are waiting for validation\"\n            + this.state.events[i].args.reqAddr, \"info\");\n        }\n      }\n\n      // Validation Assigned to Provider\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Validation Assigned to Provider\") {\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Validator Found\", \"A validator was found for your task but more are still needed\", \"info\")\n        }\n        if (this.state.events[i] && this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addLongNotification(\"You are a validator\", \"You need to validate the task as true or false. The server id is:\"\n            + hex2ascii(this.state.events[i].args.extra), \"info\");\n            this.setState({resultID : hex2ascii(this.state.events[i].args.extra)});\n            console.log(hex2ascii(this.state.events[i].args.extra));\n            this.setState({dataID : undefined});\n        }\n      }\n\n      // Not Enough validators\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Not Enough Validators\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Not Enough Validators\", \"More validators are needed before the result can be sent to you\"\n            + this.state.events[i].args.provAddr, \"warning\")\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"Not Enough Validators\", \"There were not enough validators to verfiy your resulting work. Please wait.\"\n            + this.state.events[i].args.reqAddr, \"info\");\n        }\n      }\n\n\n      // Enough Validators\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Enough Validators\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"All Validators Found\", \"Your task is being validated. Please hold.\", \"success\")\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"All Validators Found\", \"Your work is being validated. Please hold.\", \"info\");\n        }\n      }\n\n\n      // Validator Signed\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Validator Signed\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addNotification(\"Validator signed\", \"Your task is being validated\", \"info\")\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"You Have signed your validation\", \"You have validated the request from address\", \"info\");\n        }\n      }\n\n\n      // Validation Complete\n      if (this.state.events[i].args && hex2ascii(this.state.events[i].args.info) === \"Validation Complete\") {\n        if (this.state.myAccount === this.state.events[i].args.reqAddr) {\n          this.addLongNotification(\"Job Done\", \"Please download your resultant file from server using the hash \" + hex2ascii(this.state.events[i].args.extra), \"success\")\n          this.setState({resultID : hex2ascii(this.state.events[i].args.extra)});\n        }\n        if (this.state.myAccount === this.state.events[i].args.provAddr) {\n          this.addNotification(\"Work Validated!\", \"Your work was validated and you should receive payment soon\", \"info\");\n        }\n        console.log(this.state.events[i].blockNumber);\n        this.setState({dataID: undefined, RequestStartTime: this.state.events[i].blockNumber+1});\n        \n      }\n    }\n\n  }\n\n  addNotification(title, message, type) {\n    this.notificationDOMRef.current.addNotification({\n      title: title,\n      message: message,\n      type: type,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: { duration: 5000 },\n      dismissable: { click: true }\n    });\n  }\n\n  addLongNotification(title, message, type) {\n    this.notificationDOMRef.current.addNotification({\n      title: title,\n      message: message,\n      type: type,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: { duration: 20000 },\n      dismissable: { click: true }\n    });\n  }\n\n  showApplyButton() {\n    if (this.state.mode === 'WORKER') {\n      return (\n        <button onClick={this.applyAsProvider} style={{ margin: 10 }}>\n          Submit Provider Application\n          </button>\n      );\n    }\n  }\n\n  showValidationButtons() {\n    if (this.state.mode === 'WORKER' && this.state.resultID !== undefined && this.state.dataID === undefined) {\n      return (\n        <div>\n          <h2> VALIDATIONS </h2>\n          <p>\n          <button id={'trueButton'} onClick={this.submitValidationTrue} style={{ marginBottom: 5 , marginRight : 10}} >\n            TRUE\n          </button>\n          <button id={'falseButton'} onClick={this.submitValidationFalse} style={{ marginBottom: 5 , marginLeft: 10}}>\n            FALSE\n          </button>\n          </p>\n          Current Validation Result: {'' + this.state.ValidationResult}\n        </div>\n      );\n    }\n  }\n\n  showIDs(){\n    if(this.state.dataID !== undefined && this.state.resultID === undefined){\n      return(\n      <div>\n        <p>\n          DataID is: {\"\" + this.state.dataID}\n        </p>\n        <form onSubmit={this.downloadEvent}  name=\"data\">\n          <button>Download the data</button>  \n        </form>\n      </div>\n      );\n    }\n    if(this.state.resultID !== undefined && this.state.dataID === undefined){\n      return(\n      <div>\n        <p>resultID is: {\"\" + this.state.resultID}</p>\n        <form onSubmit={this.downloadEvent}  name=\"result\">\n          <button>Download the result</button>  \n        </form>\n      </div>\n      );\n    }\n    if(this.state.dataID !== undefined && this.state.resultID !== undefined){\n      return(\n        <div>\n          <p>\n            DataID is: {\"\" + this.state.dataID}\n          </p>\n          <form onSubmit={this.downloadEvent}  name=\"data\">\n            <button>Download the data</button>  \n          </form>\n          <p>resultID is: {\"\" + this.state.resultID}</p>\n          <form onSubmit={this.downloadEvent}  name=\"result\">\n            <button>Download the result</button>  \n          </form>\n        </div>\n        );\n    }\n  }\n\n  // apply provider or nothing\n  showSubmitButton() {\n    if (this.state.mode === 'USER') {\n      return\n    }\n    if (this.state.mode === 'WORKER') {\n      return (\n        <button onClick={this.applyAsProvider} style={{ margin: 10 }}>\n          Apply Provider\n          </button>\n      );\n    }\n  }\n  // upload script or result\n  showUploadModule() {\n    if (this.state.mode === \"USER\" ){\n      return (\n        <div><h2>{\"UPLOAD TASK SCRIPT\" }</h2>\n        <form onSubmit={this.serverSubmit}>\n          <input type='file' id='fileInput' onChange={this.captureFile}></input>\n          <button onClick={this.submitRequest} style={{ margin: 10 }}>\n          Submit Task\n          </button>\n          {/*<input type='submit' value=\"Upload to server\"></input>*/}\n        </form></div>\n      )\n    }\n    if (this.state.mode === 'WORKER' && this.state.buffer === undefined && this.state.dataID !== undefined) {\n      return(\n        <div>\n          <h2>SUBMIT RESULT PACKAGE</h2>\n          <p>Please wait a submit button will appear once the script has been executed</p>\n        </div>\n      );\n    }\n    if (this.state.mode === 'WORKER' && this.state.buffer !== undefined ) {\n      //there needs to be a resend function if the data is null(reupload button)\n      return (\n        <div><h2>SUBMIT RESULT PACKAGE</h2>\n          <form onSubmit={this.serverSubmit}>\n          \n          {/*<input type='submit' value=\"Upload to server\"></input>*/}\n       \n        <button id={'submitButton'} onClick={this.submitJob} style={{ marginTop: 10, marginLeft: 15, marginBottom: 10 }}>\n          Submit Result\n        </button>\n        </form></div>\n      );\n    }\n  }\n  //used to align User mode with worker mode\n  showUserDivider(){\n    if (this.state.mode === \"USER\")\n      return (\n        <div style={{marginBottom: 190}}></div>\n      )\n  }\n\n  //stop providing/request buttons\n  showStopButtons(){\n    if(this.state.mode === 'WORKER'){\n      return(\n        <button onClick={this.stopProviding} style={{ margin: 10 }}>\n          Stop Working\n          </button>\n      )\n    }\n    if(this.state.mode === 'USER'){\n      return(\n        <button onClick={this.stopJob} style={{ margin: 10 }}>\n          Remove Job\n          </button>\n      )\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////\n  //components of react: https://reactjs.org/docs/forms.html  \n  render() {\n\n    this.state.mode === \"USER\" ? document.body.style = 'background:#F5F2D1;' : document.body.style = 'background:#E7F5D1;'\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <ReactNotification ref={this.notificationDOMRef} />\n        <h1 style={{ marginBottom: 30 }}>Welcome to the BCAI Dapp</h1>\n        <button id={'modeButton'} onClick={this.changeMode} style={{ fontsize: 40, height:60, width: 120, marginBottom: 20 }}>{this.state.mode} MODE</button>\n\n        \n\n        <form onSubmit={this.startRequestSubmit}>\n        <h2>{this.state.mode === 'USER' ? \"SUBMIT YOUR TASK (in a zip file name data.zip)\" : \"APPLY TO BE PROVIDER\"}</h2>\n          <p><label>\n            Time : (in seconds)\n          <input type=\"number\" value={this.state.Time} onChange={this.TimeChange} />\n          </label></p>\n          <p><label>\n            Target : (0-100)\n          <input type=\"number\" value={this.state.Target} onChange={this.TargetChange} />\n          </label></p>\n          <p><label>\n            Price : (in wei)\n          <input type=\"number\" value={this.state.Price} onChange={this.PriceChange} />\n          </label></p>\n          <p>Use account:          <div> {this.state.myAccount}  </div> \n            <br></br>\n            {this.showIDs()}\n            {this.showSubmitButton()}\n          </p>\n        </form>\n        {this.showUploadModule()}\n        {this.showStopButtons()}\n        {this.showValidationButtons()}\n        {this.showUserDivider()}\n        \n\n        <h2 style={{ marginTop: 20 }}>CURRENT ACCOUNT\n        <button onClick={this.checkEvents} style={{marginLeft : 20, marginBottom: 10 }}> Check Status </button></h2>\n        \n\n        <div style={{ marginTop: 5 }}>\n          <h2 style={{ margin: 1 }}>CURRENT STATE OF CONTRACT\n          <button onClick={this.showPools} style={{marginLeft: 20}}>\n            Refresh\n          </button></h2>\n          <p>Provider Pool = {this.state.providerCount}</p>\n          <p>Pending Pool = {this.state.pendingCount}</p>\n          <p>Providing Pool = {this.state.providingCount}</p>\n          <p>Validating Pool = {this.state.validatingCount}</p>\n          \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 349;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}